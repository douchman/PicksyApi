plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.buck'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jar {
	archiveBaseName.set('vsplay')
	archiveVersion.set('')
	archiveClassifier.set('')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation(platform("software.amazon.awssdk:bom:2.27.21"))
	implementation("software.amazon.awssdk:s3")

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'


	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// ✅ H2와 MySQL을 환경별로 나누기
configurations {
	h2RuntimeOnly
	mysqlRuntimeOnly
}

dependencies {
	h2RuntimeOnly 'com.h2database:h2' //  for Local and Dev
	mysqlRuntimeOnly 'com.mysql:mysql-connector-j' // for Prod
}

configurations.runtimeOnly {
	if (System.getenv("SPRING_PROFILE_ACTIVE") == "prod") {
		extendsFrom(configurations.mysqlRuntimeOnly)
	} else {
		extendsFrom(configurations.h2RuntimeOnly)
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
